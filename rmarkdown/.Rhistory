real expcens_log(vector x, vector lam, vector fail){
real lprob;
lprob = sum(fail*log(lam) - lam*x);
return lprob;
}
}
data {
int<lower=0> N;
vector[N] treat;
vector[N] censored;
vector[N] t;
}
transformed data {
// convert censoring indicators to indicators for failure event
int failure;
for (n in 1:N){
failure = censored[n] == 0;
}
}
parameters {
// Parameters (intercept and treatment effect) for survival rate
vector[2] beta;
}
transformed parameters {
vector[N] lambda;
for (n in 1:N){
lambda[n]=exp(beta[1]+beta[2]*treat[n]);
}
}
model {
// define priors
beta ~ normal(0, 1000);
t ~ expcens(lambda,failure)
// likelihood
//for(n in 1:N){
//  target += expcens_log(t[n], lambda[n], failure[n]);
//}
}
"
dat_list = list(N= nrow(melanoma),
treat = melanoma$treat,
censored = melanoma$censored,
t = melanoma$t)
fit0 <- stan(model_code = mcode, iter = 10, data=dat_list, verbose = FALSE)
mcode <- "
functions {
//Note: functions block must appear before all other blocks
real expcens_log(vector x, real lam, int fail){
real lprob;
lprob = sum(fail*log(lam) - lam*x);
return lprob;
}
}
data {
int<lower=0> N;
vector[N] treat;
vector[N] censored;
vector[N] t;
}
transformed data {
// convert censoring indicators to indicators for failure event
int failure;
for (n in 1:N){
failure = censored[n] == 0;
}
}
parameters {
// Parameters (intercept and treatment effect) for survival rate
vector[2] beta;
}
transformed parameters {
vector[N] lambda;
for (n in 1:N){
lambda[n]=exp(beta[1]+beta[2]*treat[n]);
}
}
model {
// define priors
beta ~ normal(0, 1000);
t ~ expcens(lambda,failure)
// likelihood
//for(n in 1:N){
//  target += expcens_log(t[n], lambda[n], failure[n]);
//}
}
"
dat_list = list(N= nrow(melanoma),
treat = melanoma$treat,
censored = melanoma$censored,
t = melanoma$t)
fit0 <- stan(model_code = mcode, iter = 10, data=dat_list, verbose = FALSE)
mcode <- "
functions {
//Note: functions block must appear before all other blocks
real expcens_log(vector x, real lam, int fail){
real lprob;
lprob = sum(fail*log(lam) - lam*x);
return lprob;
}
}
data {
int<lower=0> N;
vector[N] treat;
vector[N] censored;
vector[N] t;
}
transformed data {
// convert censoring indicators to indicators for failure event
int failure;
for (n in 1:N){
failure = censored[n] == 0;
}
}
parameters {
// Parameters (intercept and treatment effect) for survival rate
vector[2] beta;
}
transformed parameters {
vector[N] lambda;
for (n in 1:N){
lambda[n]=exp(beta[1]+beta[2]*treat[n]);
}
}
model {
// define priors
beta ~ normal(0, 1000);
t ~ expcens(lambda,failure);
// likelihood
//for(n in 1:N){
//  target += expcens_log(t[n], lambda[n], failure[n]);
//}
}
"
dat_list = list(N= nrow(melanoma),
treat = melanoma$treat,
censored = melanoma$censored,
t = melanoma$t)
fit0 <- stan(model_code = mcode, iter = 10, data=dat_list, verbose = FALSE)
mcode <- "
functions {
//Note: functions block must appear before all other blocks
real expcens_log(vector x, real lam, int fail){
vector[num_elements(x)] lpr;
real lprob;
for (i in 1:num_elements(x)){
lpr[i] = fail*log(lam) - lam*x[i]
}
lprob = sum(lpr);
return lprob;
}
}
data {
int<lower=0> N;
vector[N] treat;
vector[N] censored;
vector[N] t;
}
transformed data {
// convert censoring indicators to indicators for failure event
int failure;
for (n in 1:N){
failure = censored[n] == 0;
}
}
parameters {
// Parameters (intercept and treatment effect) for survival rate
vector[2] beta;
}
transformed parameters {
vector[N] lambda;
for (n in 1:N){
lambda[n]=exp(beta[1]+beta[2]*treat[n]);
}
}
model {
// define priors
beta ~ normal(0, 1000);
t ~ expcens(lambda,failure);
// likelihood
//for(n in 1:N){
//  target += expcens_log(t[n], lambda[n], failure[n]);
//}
}
"
dat_list = list(N= nrow(melanoma),
treat = melanoma$treat,
censored = melanoma$censored,
t = melanoma$t)
fit0 <- stan(model_code = mcode, iter = 10, data=dat_list, verbose = FALSE)
mcode <- "
functions {
//Note: functions block must appear before all other blocks
real expcens_log(vector x, real lam, int fail){
vector[num_elements(x)] lpr;
real lprob;
for (i in 1:num_elements(x)){
lpr[i] = fail*log(lam) - lam*x[i];
}
lprob = sum(lpr);
return lprob;
}
}
data {
int<lower=0> N;
vector[N] treat;
vector[N] censored;
vector[N] t;
}
transformed data {
// convert censoring indicators to indicators for failure event
int failure;
for (n in 1:N){
failure = censored[n] == 0;
}
}
parameters {
// Parameters (intercept and treatment effect) for survival rate
vector[2] beta;
}
transformed parameters {
vector[N] lambda;
for (n in 1:N){
lambda[n]=exp(beta[1]+beta[2]*treat[n]);
}
}
model {
// define priors
beta ~ normal(0, 1000);
t ~ expcens(lambda,failure);
// likelihood
//for(n in 1:N){
//  target += expcens_log(t[n], lambda[n], failure[n]);
//}
}
"
dat_list = list(N= nrow(melanoma),
treat = melanoma$treat,
censored = melanoma$censored,
t = melanoma$t)
fit0 <- stan(model_code = mcode, iter = 10, data=dat_list, verbose = FALSE)
mcode <- "
functions {
//Note: functions block must appear before all other blocks
real expcens_log(vector x, vector lam, vector fail){
vector[num_elements(x)] lpr;
real lprob;
for (i in 1:num_elements(x)){
lpr[i] = fail[i]*log(lam[i]) - lam[i]*x[i];
}
lprob = sum(lpr);
return lprob;
}
}
data {
int<lower=0> N;
vector[N] treat;
vector[N] censored;
vector[N] t;
}
transformed data {
// convert censoring indicators to indicators for failure event
int failure;
for (n in 1:N){
failure = censored[n] == 0;
}
}
parameters {
// Parameters (intercept and treatment effect) for survival rate
vector[2] beta;
}
transformed parameters {
vector[N] lambda;
for (n in 1:N){
lambda[n]=exp(beta[1]+beta[2]*treat[n]);
}
}
model {
// define priors
beta ~ normal(0, 1000);
t ~ expcens(lambda,failure);
// likelihood
//for(n in 1:N){
//  target += expcens_log(t[n], lambda[n], failure[n]);
//}
}
"
dat_list = list(N= nrow(melanoma),
treat = melanoma$treat,
censored = melanoma$censored,
t = melanoma$t)
fit0 <- stan(model_code = mcode, iter = 10, data=dat_list, verbose = FALSE)
mcode <- "
functions {
//Note: functions block must appear before all other blocks
real expcens_log(vector x, vector lam, vector fail){
vector[num_elements(x)] lpr;
real lprob;
for (i in 1:num_elements(x)){
lpr[i] = fail[i]*log(lam[i]) - lam[i]*x[i];
}
lprob = sum(lpr);
return lprob;
}
}
data {
int<lower=0> N;
vector[N] treat;
vector[N] censored;
vector[N] t;
}
transformed data {
// convert censoring indicators to indicators for failure event
vector failure;
for (n in 1:N){
failure = censored[n] == 0;
}
}
parameters {
// Parameters (intercept and treatment effect) for survival rate
vector[2] beta;
}
transformed parameters {
vector[N] lambda;
for (n in 1:N){
lambda[n]=exp(beta[1]+beta[2]*treat[n]);
}
}
model {
// define priors
beta ~ normal(0, 1000);
t ~ expcens(lambda,failure);
// likelihood
//for(n in 1:N){
//  target += expcens_log(t[n], lambda[n], failure[n]);
//}
}
"
dat_list = list(N= nrow(melanoma),
treat = melanoma$treat,
censored = melanoma$censored,
t = melanoma$t)
fit0 <- stan(model_code = mcode, iter = 10, data=dat_list, verbose = FALSE)
mcode <- "
functions {
//Note: functions block must appear before all other blocks
real expcens_log(vector x, vector lam, vector fail){
vector[num_elements(x)] lpr;
real lprob;
for (i in 1:num_elements(x)){
lpr[i] = fail[i]*log(lam[i]) - lam[i]*x[i];
}
lprob = sum(lpr);
return lprob;
}
}
data {
int<lower=0> N;
vector[N] treat;
vector[N] censored;
vector[N] t;
}
transformed data {
// convert censoring indicators to indicators for failure event
vector failure;
for (n in 1:N){
failure[n] = censored[n] == 0;
}
}
parameters {
// Parameters (intercept and treatment effect) for survival rate
vector[2] beta;
}
transformed parameters {
vector[N] lambda;
for (n in 1:N){
lambda[n]=exp(beta[1]+beta[2]*treat[n]);
}
}
model {
// define priors
beta ~ normal(0, 1000);
t ~ expcens(lambda,failure);
// likelihood
//for(n in 1:N){
//  target += expcens_log(t[n], lambda[n], failure[n]);
//}
}
"
dat_list = list(N= nrow(melanoma),
treat = melanoma$treat,
censored = melanoma$censored,
t = melanoma$t)
fit0 <- stan(model_code = mcode, iter = 10, data=dat_list, verbose = FALSE)
mcode <- "
functions {
//Note: functions block must appear before all other blocks
real expcens_log(vector x, vector lam, vector fail){
vector[num_elements(x)] lpr;
real lprob;
for (i in 1:num_elements(x)){
lpr[i] = fail[i]*log(lam[i]) - lam[i]*x[i];
}
lprob = sum(lpr);
return lprob;
}
}
data {
int<lower=0> N;
vector[N] treat;
vector[N] censored;
vector[N] t;
}
transformed data {
// convert censoring indicators to indicators for failure event
vector[N] failure;
for (n in 1:N){
failure[n] = censored[n] == 0;
}
}
parameters {
// Parameters (intercept and treatment effect) for survival rate
vector[2] beta;
}
transformed parameters {
vector[N] lambda;
for (n in 1:N){
lambda[n]=exp(beta[1]+beta[2]*treat[n]);
}
}
model {
// define priors
beta ~ normal(0, 1000);
t ~ expcens(lambda,failure);
// likelihood
//for(n in 1:N){
//  target += expcens_log(t[n], lambda[n], failure[n]);
//}
}
"
dat_list = list(N= nrow(melanoma),
treat = melanoma$treat,
censored = melanoma$censored,
t = melanoma$t)
fit0 <- stan(model_code = mcode, iter = 10, data=dat_list, verbose = FALSE)
plot(fit0, pars="beta")
mcode <- "
mcode <- "
functions {
}
mcode <- "
functions {
//Note: functions block must appear before all other blocks
real expcens_log(vector x, vector lam, vector fail){
vector[num_elements(x)] lpr;
real lprob;
for (i in 1:num_elements(x)){
lpr[i] = fail[i]*log(lam[i]) - lam[i]*x[i];
}
lprob = sum(lpr);
return lprob;
}
}
data {
int<lower=0> N;
vector[N] treat;
vector[N] censored;
vector[N] t;
}
transformed data {
// convert censoring indicators to indicators for failure event
vector[N] failure;
for (n in 1:N){
failure[n] = censored[n] == 0;
}
}
parameters {
// Parameters (intercept and treatment effect) for survival rate
vector[2] beta;
}
transformed parameters {
vector[N] lambda;
for (n in 1:N){
lambda[n]=exp(beta[1]+beta[2]*treat[n]);
}
}
model {
// define priors
beta ~ normal(0, 1000);
// censored exponential likelihood
t ~ expcens(lambda,failure);
}
"
?stan
trace(fit0, pars="beta")
trace(fit0)
?trace
stan_trace(fit0)
stan_trace(fit0, pars="beta")
fit0 <- stan(model_code = mcode, iter = 1000, data=dat_list, verbose = FALSE)
plot(fit0, pars="beta")
stan_trace(fit0, pars="beta")
summary(fit0)
summary(fit0, pars="beta")
s<-summary(fit0, pars="beta")
s$summary
?library(brms)
library(brms)
?brm
plot.brm
plot(fit0, pars="beta", plotfun=stan_hist)
plot(fit0, pars="beta", plotfun="stan_hist")
?stan
